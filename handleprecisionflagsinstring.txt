To diagnose and fix the issue with your `ft_printf` implementation, we need to focus on the following parts of your code:

1. **`parse_flags.c`** - This file contains the logic to parse the format flags.
2. **`print_string.c`** - This file contains the logic to print a string based on the parsed flags.
3. **`ft_printf.c`** - This is the main implementation of your custom `ft_printf`.

### Problem Description
In your custom `ft_printf`, when the precision for a string (`%.s`) is set to zero, it should print nothing. However, your implementation sets the precision to `-1` when it should be `0`, resulting in incorrect behavior where the string is printed when it should not be.

### `parse_flags.c`
The function `parse_flags` is responsible for parsing the flags from the format string and filling the `flags` structure. Here is the relevant part for precision parsing:

```c
void parse_flags(t_flags *flags, const char *format, size_t *i) {
    parse_padding(flags, format, i);
    parse_number(&(flags->width), format, i);
    if (format[*i] == '.') {
        (*i)++;
        parse_number(&(flags->precision), format, i);
    }
    if (ft_strchr("cspdiuxX%", format[*i])) {
        flags->specifier = format[*i];
        (*i)++;
    }
}
```

Here, if the precision is specified (`.`), it calls `parse_number` to set the `precision` field. However, if no precision is specified, `flags->precision` is left at its initial value of `-1`.

### `print_string.c`
This file handles printing the string based on the parsed flags. The relevant part is:

```c
void print_string(t_flags *flags, t_list *op) {
    const char *str = va_arg(op->ap, const char *);
    if (!str)
        str = "(null)";
    if (flags->precision >= 0 && flags->precision < ft_strlen(str)) {
        while (flags->precision--)
            print_char_local(*str++, op);
    } else {
        while (*str)
            print_char_local(*str++, op);
    }
}
```

Here, if `flags->precision` is `0`, it should print nothing, but if `flags->precision` is `-1`, it prints the entire string.

### Fixing the Issue
We need to ensure that when a precision of zero is specified (i.e., `%.s`), the `precision` field is set to `0` instead of `-1`.

1. **Modify `parse_flags.c`**: Ensure that if a `.` is encountered but no digits follow, `flags->precision` should be set to `0`.

Here is an updated version of the `parse_flags` function:

```c
void parse_flags(t_flags *flags, const char *format, size_t *i) {
    parse_padding(flags, format, i);
    parse_number(&(flags->width), format, i);
    if (format[*i] == '.') {
        (*i)++;
        if (ft_isdigit(format[*i])) {
            parse_number(&(flags->precision), format, i);
        } else {
            flags->precision = 0; // Set precision to 0 if '.' is present without digits
        }
    }
    if (ft_strchr("cspdiuxX%", format[*i])) {
        flags->specifier = format[*i];
        (*i)++;
    }
}
```

This ensures that `flags->precision` is correctly set to `0` when a `.` is followed by no digits.

### Testing the Fix
After applying this fix, test your `ft_printf` with the given input to ensure it produces the expected output:

```c
printf("printf: %%.s: ");
printf("%.s\n", "hello");
ft_printf("ft_printf: %%.s: ");
ft_printf("%.s\n", "hello");
```

### Updated `parse_flags.c`
Here is the complete updated `parse_flags.c`:

```c
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parse_flags.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dopereir <dopereir@student.42porto.com>    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/20 11:49:46 by dopereir          #+#    #+#             */
/*   Updated: 2024/07/28 18:27:11 by dopereir         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <ctype.h>
#include <stdlib.h>

void parse_padding(t_flags *flags, const char *format, size_t *i) {
    while (ft_strchr("+-0# ", format[*i])) {
        if (format[*i] == '+' || format[*i] == ' ' || format[*i] == '#')
            flags->padding = format[*i];
        else if (format[*i] == '0')
            flags->zero_pad = 1;
        else if (format[*i] == '-')
            flags->left_align = '-';
        (*i)++;
    }
}

void parse_number(int *field, const char *format, size_t *i) {
    if (ft_isdigit(format[*i])) {
        *field = ft_atoi(&format[*i]);
        while (ft_isdigit(format[*i]))
            (*i)++;
    }
}

void parse_flags(t_flags *flags, const char *format, size_t *i) {
    parse_padding(flags, format, i);
    parse_number(&(flags->width), format, i);
    if (format[*i] == '.') {
        (*i)++;
        if (ft_isdigit(format[*i])) {
            parse_number(&(flags->precision), format, i);
        } else {
            flags->precision = 0; // Set precision to 0 if '.' is present without digits
        }
    }
    if (ft_strchr("cspdiuxX%", format[*i])) {
        flags->specifier = format[*i];
        (*i)++;
    }
}
```

This should resolve the issue with the incorrect handling of the `%.s` format specifier in your `ft_printf` implementation.
